version: "3.8"

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - ai-assurance-net

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: /var/lib/kafka/data
    volumes:
      - kafka_data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - ai-assurance-net

  kafka-init:
    build:
      context: ./services/kafka-init
      dockerfile: Dockerfile
    container_name: kafka-init
    depends_on:
      - kafka
    restart: "no"
    networks:
      - ai-assurance-net

  mms-consumer:
    build:
      context: ./services
      dockerfile: mms-consumer/dockerfile
    container_name: mms-consumer
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
    restart: on-failure
    networks:
      - ai-assurance-net

  scheduler:
    build:
      context: ./services
      dockerfile: mms-consumer/dockerfile
    container_name: scheduler
    command: python scheduler.py
    depends_on:
      redis:
        condition: service_started
    restart: on-failure
    networks:
      - ai-assurance-net

  mms-api:
    build:
      context: ./services/mms_api
      dockerfile: Dockerfile
    container_name: mms-api
    ports:
      - "9100:9100"
    depends_on:
      - redis
      - postgres
    restart: on-failure
    environment:
      DATABASE_URL: postgresql://postgres:yourpassword@postgres:5432/assurance_db
    networks:
      - ai-assurance-net

  redis:
    image: redis/redis-stack-server:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always
    networks:
      - ai-assurance-net

  tib-producer-api:
    build:
      context: ./services/tib-producer-api
      dockerfile: Dockerfile
    container_name: tib-producer-api
    ports:
      - "8002:8000"
    depends_on:
      - kafka
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai-assurance-net

  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: yourpassword
      POSTGRES_DB: assurance_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - ai-assurance-net

  baseline-service:
    build:
      context: ./services/baseline
      dockerfile: Dockerfile
    container_name: baseline-service
    ports:
      - "8001:8000"
    restart: on-failure
    depends_on:
      - postgres
    environment:
      DATABASE_URL: postgresql://postgres:yourpassword@postgres:5432/assurance_db
    networks:
      - ai-assurance-net

  sidecar-agent:
    build:
      context: ./services/sidecar-agent
      dockerfile: Dockerfile
    container_name: sidecar-agent
    depends_on:
      - tib-producer-api
      - model-builder
    entrypoint: ["sh", "-c", "sleep 10 && python agent.py"]
    restart: on-failure
    networks:
      - ai-assurance-net

  assurance-service:
    build:
      context: ./services
      dockerfile: assurance-service/Dockerfile
    container_name: assurance-service
    ports:
      - "8000:8000"
    restart: on-failure
    depends_on:
      - postgres
    environment:
      DATABASE_URL: postgresql://postgres:yourpassword@postgres:5432/assurance_db
    networks:
      - ai-assurance-net

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - postgres
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_SECURITY_ALLOW_EMBEDDING: true
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_AUTH_ANONYMOUS_ORG_ROLE: Viewer
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_ROOT_URL: http://localhost:3000
      GF_SERVER_SERVE_FROM_SUB_PATH: true
    networks:
      - ai-assurance-net

  model-builder:
    build:
      context: ./services/model-builder
      dockerfile: Dockerfile
    container_name: model-builder
    volumes:
      - ./logs:/app/logs
    working_dir: /app
    ports:
      - "9000:9000"
    restart: on-failure
    networks:
      - ai-assurance-net

volumes:
  postgres_data:
  kafka_data:
  grafana_data:
  redis_data:

networks:
  ai-assurance-net:
    driver: bridge
