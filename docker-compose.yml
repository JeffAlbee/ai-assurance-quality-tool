version: "3.9"

services:

  # üß≠ Zookeeper for Kafka coordination
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - ai-assurance-net

  # üì° Kafka broker for telemetry ingestion
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: /var/lib/kafka/data
    volumes:
      - kafka_data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - ai-assurance-net

  # üß± Kafka topic initializer
  kafka-init:
    build: ./services/kafka-init
    container_name: kafka-init
    depends_on:
      - kafka
    restart: "no"
    networks:
      - ai-assurance-net

  # üß† MMS consumer (reads and processes Kafka messages)
  mms-consumer:
    build:
      context: ./services/mms-consumer
    container_name: mms-consumer
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
    restart: on-failure
    networks:
      - ai-assurance-net

  # üåê MMS API (serves /metrics for Grafana and dashboards)
  mms-api:
    build:
      context: ./services/mms-api
    container_name: mms-api
    ports:
      - "9100:9100"
    depends_on:
      - redis
    restart: on-failure
    networks:
      - ai-assurance-net

  # üóÑÔ∏è Redis for metric sharing
  redis:
    image: redis:7.2
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always
    networks:
      - ai-assurance-net

  # üåê TIB Producer API (receives telemetry from ASA)
  tib-producer-api:
    build: ./services/tib-producer-api
    container_name: tib-producer-api
    ports:
      - "8002:8000"
    depends_on:
      - kafka
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai-assurance-net

  # üóÑÔ∏è PostgreSQL for baseline storage
  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: yourpassword
      POSTGRES_DB: assurance_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - ai-assurance-net

  # üìä Quality Baseline Service (QBS)
  baseline-service:
    build: ./services/baseline
    container_name: baseline-service
    ports:
      - "8001:8000"
    restart: on-failure
    depends_on:
      - postgres
    environment:
      DATABASE_URL: postgresql://postgres:yourpassword@postgres/assurance_db
    networks:
      - ai-assurance-net

  # üõ∞Ô∏è Assurance Sidecar Agent (ASA)
  sidecar-agent:
    build: ./services/sidecar-agent
    container_name: sidecar-agent
    depends_on:
      - tib-producer-api
      - model-builder
    entrypoint: ["sh", "-c", "sleep 10 && python agent.py"]
    restart: on-failure
    networks:
      - ai-assurance-net

  # üßæ Assurance Service (AS)
  assurance-service:
    build: ./services/assurance-service
    container_name: assurance-service
    ports:
      - "8000:8000"
    restart: on-failure
    depends_on:
      - postgres
    environment:
      DATABASE_URL: postgresql://postgres:yourpassword@postgres:5432/assurance_db
    networks:
      - ai-assurance-net

  # üìä Grafana for dashboarding and observability
  grafana:
    image: grafana/grafana:10.2.3
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - postgres
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    networks:
      - ai-assurance-net

  # üîç Model Builder Service (serves predictions + metrics)
  model-builder:
    build:
      context: ./services/model-builder
    container_name: model-builder
    volumes:
      - ./logs:/app/logs
    working_dir: /app
    ports:
      - "9000:9000"
    restart: on-failure
    networks:
      - ai-assurance-net

volumes:
  postgres_data:
  kafka_data:
  grafana_data:
  redis_data:

networks:
  ai-assurance-net:
    driver: bridge
